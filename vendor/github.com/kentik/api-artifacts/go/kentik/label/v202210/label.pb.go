// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: kentik/label/v202210/label.proto

package label

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/kentik/api-artifacts/go/kentik/core/v202303"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// {{.Name}}
type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Color       string                 `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Cdate       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=cdate,proto3" json:"cdate,omitempty"`
	Edate       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=edate,proto3" json:"edate,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_label_v202210_label_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_label_v202210_label_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_kentik_label_v202210_label_proto_rawDescGZIP(), []int{0}
}

func (x *Label) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Label) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Label) GetCdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Cdate
	}
	return nil
}

func (x *Label) GetEdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Edate
	}
	return nil
}

// {{.Name}}
type ListLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLabelsRequest) Reset() {
	*x = ListLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_label_v202210_label_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsRequest) ProtoMessage() {}

func (x *ListLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_label_v202210_label_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsRequest.ProtoReflect.Descriptor instead.
func (*ListLabelsRequest) Descriptor() ([]byte, []int) {
	return file_kentik_label_v202210_label_proto_rawDescGZIP(), []int{1}
}

// {{.Name}}
type ListLabelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels       []*Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	InvalidCount int32    `protobuf:"varint,2,opt,name=invalid_count,json=invalidCount,proto3" json:"invalid_count,omitempty"`
}

func (x *ListLabelsResponse) Reset() {
	*x = ListLabelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_label_v202210_label_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLabelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLabelsResponse) ProtoMessage() {}

func (x *ListLabelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_label_v202210_label_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLabelsResponse.ProtoReflect.Descriptor instead.
func (*ListLabelsResponse) Descriptor() ([]byte, []int) {
	return file_kentik_label_v202210_label_proto_rawDescGZIP(), []int{2}
}

func (x *ListLabelsResponse) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListLabelsResponse) GetInvalidCount() int32 {
	if x != nil {
		return x.InvalidCount
	}
	return 0
}

// {{.Name}}
type CreateLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *Label `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *CreateLabelRequest) Reset() {
	*x = CreateLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_label_v202210_label_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabelRequest) ProtoMessage() {}

func (x *CreateLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_label_v202210_label_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabelRequest.ProtoReflect.Descriptor instead.
func (*CreateLabelRequest) Descriptor() ([]byte, []int) {
	return file_kentik_label_v202210_label_proto_rawDescGZIP(), []int{3}
}

func (x *CreateLabelRequest) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

// {{.Name}}
type CreateLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *Label `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *CreateLabelResponse) Reset() {
	*x = CreateLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_label_v202210_label_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabelResponse) ProtoMessage() {}

func (x *CreateLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_label_v202210_label_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabelResponse.ProtoReflect.Descriptor instead.
func (*CreateLabelResponse) Descriptor() ([]byte, []int) {
	return file_kentik_label_v202210_label_proto_rawDescGZIP(), []int{4}
}

func (x *CreateLabelResponse) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

// {{.Name}}
type UpdateLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *Label `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *UpdateLabelRequest) Reset() {
	*x = UpdateLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_label_v202210_label_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelRequest) ProtoMessage() {}

func (x *UpdateLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_label_v202210_label_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelRequest.ProtoReflect.Descriptor instead.
func (*UpdateLabelRequest) Descriptor() ([]byte, []int) {
	return file_kentik_label_v202210_label_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateLabelRequest) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

// {{.Name}}
type UpdateLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label *Label `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *UpdateLabelResponse) Reset() {
	*x = UpdateLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_label_v202210_label_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelResponse) ProtoMessage() {}

func (x *UpdateLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_label_v202210_label_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelResponse.ProtoReflect.Descriptor instead.
func (*UpdateLabelResponse) Descriptor() ([]byte, []int) {
	return file_kentik_label_v202210_label_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateLabelResponse) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

// {{.Name}}
type DeleteLabelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteLabelRequest) Reset() {
	*x = DeleteLabelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_label_v202210_label_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelRequest) ProtoMessage() {}

func (x *DeleteLabelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_label_v202210_label_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelRequest.ProtoReflect.Descriptor instead.
func (*DeleteLabelRequest) Descriptor() ([]byte, []int) {
	return file_kentik_label_v202210_label_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteLabelRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// {{.Name}}
type DeleteLabelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteLabelResponse) Reset() {
	*x = DeleteLabelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kentik_label_v202210_label_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLabelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabelResponse) ProtoMessage() {}

func (x *DeleteLabelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kentik_label_v202210_label_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabelResponse.ProtoReflect.Descriptor instead.
func (*DeleteLabelResponse) Descriptor() ([]byte, []int) {
	return file_kentik_label_v202210_label_proto_rawDescGZIP(), []int{8}
}

var File_kentik_label_v202210_label_proto protoreflect.FileDescriptor

var file_kentik_label_v202210_label_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x33, 0x30, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x04, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x47, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37,
	0x92, 0x41, 0x30, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x73, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5f, 0x92, 0x41, 0x58, 0x32, 0x56,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66,
	0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x69, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x67, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41, 0x42, 0x32, 0x40, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2c, 0x20, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6b, 0x92, 0x41, 0x68, 0x32, 0x66,
	0x5b, 0x48, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5d, 0x28,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2d, 0x68, 0x65, 0x78, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x53, 0x0a,
	0x05, 0x63, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x21, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x20, 0x28, 0x55, 0x54, 0x43, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x63, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x2a, 0x92,
	0x41, 0x23, 0x32, 0x21, 0x4c, 0x61, 0x73, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20,
	0x28, 0x55, 0x54, 0x43, 0x29, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x65, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b,
	0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x31, 0x30, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x22, 0x92, 0x41, 0x1b, 0x32, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x7a, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x55, 0x92, 0x41,
	0x52, 0x32, 0x50, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x65, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x28,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x20, 0x30, 0x29, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x7a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x42, 0x31, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x7a, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x42, 0x30, 0x92, 0x41, 0x29, 0x32, 0x27, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a, 0x75, 0x73, 0x74,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x7a, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x64, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x30, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x31, 0x92, 0x41, 0x2a,
	0x32, 0x28, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x75, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x30, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x2b, 0x92, 0x41, 0x24, 0x32, 0x22, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x4c, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x92, 0x41, 0x1f, 0x32, 0x1d, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x82, 0x08, 0x0a, 0x0c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xf5, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x27, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x30, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x92, 0x41, 0x5f, 0x12, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x35, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x2a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0xf2, 0xd7, 0x02, 0x10, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x72, 0x65, 0x61, 0x64, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x76, 0x32, 0x30, 0x32,
	0x32, 0x31, 0x30, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0xf2, 0x01, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31,
	0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8d, 0x01, 0x92, 0x41, 0x55, 0x12, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x6e, 0x65, 0x77, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x1a, 0x31, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x2a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0xf2, 0xd7, 0x02, 0x11, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x76, 0x32,
	0x30, 0x32, 0x32, 0x31, 0x30, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xf3, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74,
	0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x92, 0x41, 0x4b, 0x12, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x2e, 0x1a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x2a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0xf2, 0xd7, 0x02, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x22, 0x20, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xe3, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76,
	0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x92, 0x41, 0x45, 0x12,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e,
	0x1a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x69, 0x64, 0x2e, 0x2a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0xf2, 0xd7, 0x02, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a,
	0x1a, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32, 0x31, 0x30, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x1a, 0x29, 0xca, 0x41, 0x13,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e,
	0x63, 0x6f, 0x6d, 0xea, 0xd7, 0x02, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x90, 0xd8, 0x02, 0x03, 0x42, 0xad, 0x0e, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69,
	0x2d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x65,
	0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x30, 0x3b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x92, 0x41, 0xea, 0x0d, 0x12, 0x83, 0x0c, 0x0a,
	0x14, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x41, 0x50, 0x49, 0x12, 0x9a, 0x0b, 0x23, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69,
	0x63, 0x20, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6b, 0x73, 0x79,
	0x6e, 0x74, 0x68, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x20, 0x57, 0x68,
	0x69, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20,
	0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x69, 0x73, 0x20, 0x64, 0x6f, 0x6e, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x20, 0x28, 0x73, 0x65, 0x65, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x76, 0x69, 0x61, 0x20, 0x41, 0x50, 0x49, 0x29, 0x2e,
	0x0a, 0x0a, 0x42, 0x6f, 0x74, 0x68, 0x20, 0x67, 0x52, 0x50, 0x43, 0x20, 0x52, 0x50, 0x43, 0x73,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x52, 0x45, 0x53, 0x54, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x2e, 0x0a, 0x0a, 0x23, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x20, 0x76, 0x69, 0x61, 0x20, 0x41, 0x50, 0x49, 0x0a, 0x54, 0x68, 0x65,
	0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x41, 0x50, 0x49, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x20, 0x49,
	0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x2c, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20,
	0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
	0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f,
	0x77, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x7c, 0x20, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x20, 0x7c, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x20, 0x7c, 0x0a, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
	0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x7c, 0x0a, 0x7c, 0x20,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x7c, 0x20, 0x5b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5d, 0x28, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x45, 0x63, 0x30, 0x35, 0x2e, 0x68, 0x74, 0x6d,
	0x23, 0x45, 0x63, 0x30, 0x35, 0x2d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x29, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x7c, 0x20, 0x5b, 0x53, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30,
	0x2f, 0x4f, 0x61, 0x30, 0x37, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x4f, 0x61, 0x30, 0x37, 0x2d, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x41, 0x50, 0x49, 0x29, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x7c, 0x20, 0x5b, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
	0x30, 0x2f, 0x4f, 0x61, 0x30, 0x37, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x4f, 0x61, 0x30, 0x37, 0x2d,
	0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x41, 0x50, 0x49, 0x29, 0x20, 0x7c, 0x0a, 0x7c, 0x20,
	0x42, 0x47, 0x50, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x20, 0x7c, 0x20, 0x5b, 0x42,
	0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20, 0x5d, 0x28, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x4f, 0x61, 0x30, 0x39, 0x2e, 0x68, 0x74, 0x6d,
	0x23, 0x4f, 0x61, 0x30, 0x39, 0x2d, 0x42, 0x67, 0x70, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x41, 0x50, 0x49, 0x29, 0x7c, 0x0a, 0x0a, 0x2a, 0x2a, 0x2a, 0x4e, 0x6f, 0x74, 0x65, 0x3a, 0x2a,
	0x2a, 0x2a, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x20, 0x5b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x20, 0x41, 0x50, 0x49, 0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
	0x30, 0x2f, 0x45, 0x63, 0x30, 0x35, 0x2e, 0x68, 0x74, 0x6d, 0x23, 0x45, 0x63, 0x30, 0x35, 0x2d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x41, 0x50, 0x49,
	0x29, 0x2e, 0x22, 0x45, 0x0a, 0x16, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x32, 0x07, 0x76, 0x32, 0x30, 0x32, 0x32,
	0x31, 0x30, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x44, 0x0a, 0x1e, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41,
	0x75, 0x74, 0x68, 0x2d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x08, 0x02, 0x1a, 0x13, 0x58, 0x2d, 0x43, 0x48, 0x2d, 0x41,
	0x75, 0x74, 0x68, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x62,
	0x16, 0x0a, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x00, 0x0a, 0x09, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x5d, 0x0a, 0x25, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x20, 0x4b, 0x65, 0x6e, 0x74, 0x69, 0x6b, 0x20, 0x41, 0x50, 0x49, 0x73,
	0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x62, 0x2e, 0x6b, 0x65, 0x6e,
	0x74, 0x69, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x30, 0x2f, 0x41, 0x62, 0x30, 0x39, 0x2e,
	0x68, 0x74, 0x6d, 0x23, 0x41, 0x62, 0x30, 0x39, 0x2d, 0x41, 0x50, 0x49, 0x73, 0x5f, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kentik_label_v202210_label_proto_rawDescOnce sync.Once
	file_kentik_label_v202210_label_proto_rawDescData = file_kentik_label_v202210_label_proto_rawDesc
)

func file_kentik_label_v202210_label_proto_rawDescGZIP() []byte {
	file_kentik_label_v202210_label_proto_rawDescOnce.Do(func() {
		file_kentik_label_v202210_label_proto_rawDescData = protoimpl.X.CompressGZIP(file_kentik_label_v202210_label_proto_rawDescData)
	})
	return file_kentik_label_v202210_label_proto_rawDescData
}

var file_kentik_label_v202210_label_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_kentik_label_v202210_label_proto_goTypes = []interface{}{
	(*Label)(nil),                 // 0: kentik.label.v202210.Label
	(*ListLabelsRequest)(nil),     // 1: kentik.label.v202210.ListLabelsRequest
	(*ListLabelsResponse)(nil),    // 2: kentik.label.v202210.ListLabelsResponse
	(*CreateLabelRequest)(nil),    // 3: kentik.label.v202210.CreateLabelRequest
	(*CreateLabelResponse)(nil),   // 4: kentik.label.v202210.CreateLabelResponse
	(*UpdateLabelRequest)(nil),    // 5: kentik.label.v202210.UpdateLabelRequest
	(*UpdateLabelResponse)(nil),   // 6: kentik.label.v202210.UpdateLabelResponse
	(*DeleteLabelRequest)(nil),    // 7: kentik.label.v202210.DeleteLabelRequest
	(*DeleteLabelResponse)(nil),   // 8: kentik.label.v202210.DeleteLabelResponse
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_kentik_label_v202210_label_proto_depIdxs = []int32{
	9,  // 0: kentik.label.v202210.Label.cdate:type_name -> google.protobuf.Timestamp
	9,  // 1: kentik.label.v202210.Label.edate:type_name -> google.protobuf.Timestamp
	0,  // 2: kentik.label.v202210.ListLabelsResponse.labels:type_name -> kentik.label.v202210.Label
	0,  // 3: kentik.label.v202210.CreateLabelRequest.label:type_name -> kentik.label.v202210.Label
	0,  // 4: kentik.label.v202210.CreateLabelResponse.label:type_name -> kentik.label.v202210.Label
	0,  // 5: kentik.label.v202210.UpdateLabelRequest.label:type_name -> kentik.label.v202210.Label
	0,  // 6: kentik.label.v202210.UpdateLabelResponse.label:type_name -> kentik.label.v202210.Label
	1,  // 7: kentik.label.v202210.LabelService.ListLabels:input_type -> kentik.label.v202210.ListLabelsRequest
	3,  // 8: kentik.label.v202210.LabelService.CreateLabel:input_type -> kentik.label.v202210.CreateLabelRequest
	5,  // 9: kentik.label.v202210.LabelService.UpdateLabel:input_type -> kentik.label.v202210.UpdateLabelRequest
	7,  // 10: kentik.label.v202210.LabelService.DeleteLabel:input_type -> kentik.label.v202210.DeleteLabelRequest
	2,  // 11: kentik.label.v202210.LabelService.ListLabels:output_type -> kentik.label.v202210.ListLabelsResponse
	4,  // 12: kentik.label.v202210.LabelService.CreateLabel:output_type -> kentik.label.v202210.CreateLabelResponse
	6,  // 13: kentik.label.v202210.LabelService.UpdateLabel:output_type -> kentik.label.v202210.UpdateLabelResponse
	8,  // 14: kentik.label.v202210.LabelService.DeleteLabel:output_type -> kentik.label.v202210.DeleteLabelResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_kentik_label_v202210_label_proto_init() }
func file_kentik_label_v202210_label_proto_init() {
	if File_kentik_label_v202210_label_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kentik_label_v202210_label_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_label_v202210_label_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_label_v202210_label_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLabelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_label_v202210_label_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_label_v202210_label_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_label_v202210_label_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_label_v202210_label_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_label_v202210_label_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kentik_label_v202210_label_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLabelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kentik_label_v202210_label_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kentik_label_v202210_label_proto_goTypes,
		DependencyIndexes: file_kentik_label_v202210_label_proto_depIdxs,
		MessageInfos:      file_kentik_label_v202210_label_proto_msgTypes,
	}.Build()
	File_kentik_label_v202210_label_proto = out.File
	file_kentik_label_v202210_label_proto_rawDesc = nil
	file_kentik_label_v202210_label_proto_goTypes = nil
	file_kentik_label_v202210_label_proto_depIdxs = nil
}
